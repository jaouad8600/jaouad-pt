name: Build rapportage JSON
on:
  issues:
    types: [opened, edited, labeled, unlabeled]
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Ensure 'rapportage' label exists
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.issues.getLabel({
                owner: context.repo.owner, repo: context.repo.repo, name: "rapportage"
              });
              core.info("Label 'rapportage' bestaat.");
            } catch {
              await github.rest.issues.createLabel({
                owner: context.repo.owner, repo: context.repo.repo,
                name: "rapportage", color: "FF7A00",
                description: "Ingevulde sport-rapportage"
              });
              core.info("Label 'rapportage' aangemaakt.");
            }

      - name: Ensure current issue has 'rapportage' label
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const n = context.payload.issue.number;
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner, repo: context.repo.repo, issue_number: n
            });
            const has = labels.some(l => (l.name || "").toLowerCase() === "rapportage");
            if (!has) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner, repo: context.repo.repo, issue_number: n,
                labels: ["rapportage"]
              });
              core.info("Label toegevoegd.");
            } else {
              core.info("Label was al aanwezig.");
            }

      - name: Retitle issue from form fields
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue?.body || "";
            function pick(label) {
              const patterns = [
                new RegExp(String.raw`(?:\\*\\*\\s*${label}\\s*\\*\\*|^###\\s*${label})\\s*[\\r\\n]+([\\s\\S]*?)(?=(?:\\*\\*.+?\\*\\*|^###\\s*.+|$))`, "im"),
              ];
              for (const re of patterns) {
                const m = re.exec(body);
                if (m) return (m[1] || "").trim();
              }
              return "";
            }
            const groep = pick("Groep") || "—";
            const datum = pick("Datum") || "—";
            const begeleider = pick("Begeleider") || "—";
            const desired = `[Rapportage] ${groep} — ${datum} — ${begeleider}`;
            if ((context.payload.issue.title || "") !== desired) {
              await github.rest.issues.update({
                owner: context.repo.owner, repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                title: desired
              });
              core.info(`Title updated: ${desired}`);
            } else {
              core.info("Title al correct.");
            }

      - name: Build JSON (no deps)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: node scripts/build.mjs

      - name: Copy JSON to docs
        run: |
          mkdir -p docs/data
          cp -f data/*.json docs/data/ || true

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/*.json docs/data/*.json || true
          git commit -m "chore: update rapportage JSON" || echo "No changes"
          git push || true
